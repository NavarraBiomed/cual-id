#!/usr/bin/env python
import click
import sys

from cualid.label import get_barcodes
from cualid.mint import create_ids
from cualid.fix import fix_ids

@click.group()
def cli():
    pass

@cli.group()
def create():
    """Command to create barcode labels or sample ids."""
    pass

@create.command("labels")
@click.argument('input', type=click.File('U'), required=True)
@click.option('-o', '--output-pdf', type=click.STRING, required=True)
@click.option('--suppress-ids', is_flag=True)
@click.option('--barcode', type=click.STRING, required=False)
def barcode_generator(input, output_pdf, suppress_ids, barcode):
    """This script generates a pdf of barcodes"""
    if suppress_ids and barcode == 'none':
        click.ClickException("Please don't do that").show()
        exit()

    barcodes = get_barcodes(input, output_pdf, suppress_ids, barcode)
    barcodes.save()

@create.command("ids")
@click.argument('number-of-ids', type=int)
@click.option('-p', '--prefix', type=str)
def sample_id_generator(number_of_ids, prefix=None):
    """This script generates a file of sample IDs"""
    for id_ in get_cual_ids(number_of_ids, prefix):
        click.echo(id_)

@cli.command("fix")
@click.argument('ids-to-be-corrected', type=click.File('U'), required=True)
@click.option('--correct-ids', type=click.File('U'), required=True)
@click.option('-s', '--show', type=click.STRING, required=False)
@click.option('-a', '--all', is_flag=True, required=False)
def correct_ids(correct_ids, ids_to_be_corrected, show='DFN', all=False):
    """Compare a set of possibly invalid IDs against a correct set of IDs
    to identify errors in the IDs"""
    corrected_ids = fix_ids(correct_ids,
                            ids_to_be_corrected,
                            show,
                            all)

    click.echo(corrected_ids)


if __name__ == '__main__':
    cli()
